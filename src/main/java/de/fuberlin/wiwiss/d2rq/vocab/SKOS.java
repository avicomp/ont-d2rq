/* CVS $Id: SKOS.java,v 1.1 2006/09/07 21:33:19 cyganiak Exp $ */
package de.fuberlin.wiwiss.d2rq.vocab;

import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.Resource;

/**
 * Vocabulary definitions from http://www.w3.org/2004/02/skos/core
 *
 * @author Auto-generated by schemagen on 06 Sep 2006 22:43
 */
@SuppressWarnings("unused")
public class SKOS {

    /**
     * <p>The RDF model that holds the vocabulary terms</p>
     */
    private static Model model = ModelFactory.createDefaultModel();

    /**
     * <p>The namespace of the vocabulary as a string</p>
     */
    public static final String NS = "http://www.w3.org/2004/02/skos/core#";

    /**
     * <p>The namespace of the vocabulary as a string</p>
     *
     * @return String
     */
    public static String getURI() {
        return NS;
    }

    /**
     * <p>The namespace of the vocabulary as a resource</p>
     */
    public static final Resource NAMESPACE = model.createResource(NS);

    /**
     * <p>Acronyms, abbreviations, spelling variants, and irregular plural/singular
     * forms may be included among the alternative labels for a concept. Mis-spelled
     * terms are normally included as hidden labels (see skos:hiddenLabel).</p>
     */
    public static final Property altLabel = property("altLabel");

    public static final Property scopeNote = property("scopeNote");

    /**
     * <p>Narrower concepts are typically rendered as children in a concept hierarchy
     * (tree).</p>
     */
    public static final Property narrower = property("narrower");

    /**
     * <p>This property may be used directly, or as a super-property for more specific
     * note types.</p>
     */
    public static final Property note = property("note");

    public static final Property isSubjectOf = property("isSubjectOf");

    public static final Property altSymbol = property("altSymbol");

    /**
     * <p>Broader concepts are typically rendered as parents in a concept hierarchy
     * (tree).</p>
     */
    public static final Property broader = property("broader");

    public static final Property definition = property("definition");

    /**
     * <p>This property allows subject indicators to be used for concept identification
     * in place of or in addition to directly assigned URIs.</p>
     */
    public static final Property subjectIndicator = property("subjectIndicator");

    /**
     * <p>The following rule may be applied for this property: [(?d skos:subject ?x)(?x
     * skos:broader ?y) implies (?d skos:subject ?y)]</p>
     */
    public static final Property subject = property("subject");

    /**
     * <p>A concept may be a member of more than one concept scheme.</p>
     */
    public static final Property inScheme = property("inScheme");

    public static final Property historyNote = property("historyNote");

    public static final Property hiddenLabel = property("hiddenLabel");

    /**
     * <p>No two concepts in the same concept scheme may have the same value for skos:prefSymbol.</p>
     */
    public static final Property prefSymbol = property("prefSymbol");

    /**
     * <p>A resource may have only one primary subject per concept scheme.</p>
     */
    public static final Property primarySubject = property("primarySubject");

    public static final Property related = property("related");

    public static final Property member = property("member");

    /**
     * <p>The following rule applies for this property: [(?c skos:memberList ?l) elementOfList(?e,?l)
     * implies (?c skos:member ?e)]</p>
     */
    public static final Property memberList = property("memberList");

    public static final Property example = property("example");

    /**
     * <p>This property should not be used directly, but as a super-property for all
     * properties denoting a relationship of meaning between concepts.</p>
     */
    public static final Property semanticRelation = property("semanticRelation");

    public static final Property changeNote = property("changeNote");

    public static final Property hasTopConcept = property("hasTopConcept");

    /**
     * <p>This property is roughly analagous to rdfs:label, but for labelling resources
     * with images that have retrievable representations, rather than RDF literals.</p>
     */
    public static final Property symbol = property("symbol");

    /**
     * <p>No two concepts in the same concept scheme may have the same value for skos:prefLabel
     * in a given language.</p>
     */
    public static final Property prefLabel = property("prefLabel");

    public static final Property editorialNote = property("editorialNote");

    public static final Property isPrimarySubjectOf = property("isPrimarySubjectOf");

    /**
     * <p>The following rule applies for this property: [(?x ?p ?c) (?c skos:member
     * ?y) (?p rdf:type skos:CollectableProperty) implies (?x ?p ?y)]</p>
     */
    public static final Resource CollectableProperty = resource("CollectableProperty");

    /**
     * <p>Ordered collections can be used with collectable semantic relation properties,
     * where you would like a set of concepts to be displayed in a specific order,
     * and optionally under a 'node label'.</p>
     */
    public static final Resource OrderedCollection = resource("OrderedCollection");

    /**
     * <p>Labelled collections can be used with collectable semantic relation properties
     * e.g. skos:narrower, where you would like a set of concepts to be displayed
     * under a 'node label' in the hierarchy.</p>
     */
    public static final Resource Collection = resource("Collection");

    public static final Resource Concept = resource("Concept");

    /**
     * <p>Thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies',
     * and other types of controlled vocabulary are all examples of concept schemes.
     * Concept schemes are also embedded in glossaries and terminologies.A concept
     * scheme may be defined to include concepts from different sources.</p>
     */
    public static final Resource ConceptScheme = resource("ConceptScheme");

    protected static Resource resource(String localName) {
        return model.createResource(NS + localName);
    }

    protected static Property property(String localName) {
        return model.createProperty(NS + localName);
    }

}
