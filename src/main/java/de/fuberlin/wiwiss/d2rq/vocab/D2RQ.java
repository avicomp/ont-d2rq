/* CVS $Id: $ */
package de.fuberlin.wiwiss.d2rq.vocab;

import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.Resource;

/**
 * Vocabulary definitions from file:doc/terms/d2rq.ttl
 * @author Auto-generated by schemagen on 27 Mar 2012 02:00
 */
@SuppressWarnings("unused")
public class D2RQ {

    /**
     * <p>The RDF model that holds the vocabulary terms</p>
     */
    private static Model model = ModelFactory.createDefaultModel();

    /**
     * The URI.
     **/
    public static final String URI = "http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1";

    /**
     * <p>The namespace of the vocabulary as a string</p>
     */
    public static final String NS = URI + "#";

    /**
     * <p>The namespace of the vocabulary as a string</p>
     *
     * @return String
     */
    public static String getURI() {
        return NS;
    }

    /**
     * <p>An additional property to be served for all associated class definitions</p>
     */
    public static final Property additionalClassDefinitionProperty = property("additionalClassDefinitionProperty");

    @Deprecated
    public static final Property additionalProperty = property("additionalProperty");

    /**
     * <p>An additional property to be served for all associated property definitions</p>
     */
    public static final Property additionalPropertyDefinitionProperty = property("additionalPropertyDefinitionProperty");

    /**
     * <p>TABLE AS ALIAS declaration for establishing an alternate table name.</p>
     */
    public static final Property alias = property("alias");

    /**
     * <p>Value: true/false that describe the databases ability to handle DISTINCT correctly.
     * Deprecated, the engine now determines this automatically.</p>
     */
    public static final Property allowDistinct = property("allowDistinct");

    /**
     * <p>Comma-separated list of database columns used for construction of blank nodes.</p>
     */
    public static final Property bNodeIdColumns = property("bNodeIdColumns");

    public static final Property belongsToClassMap = property("belongsToClassMap");

    /**
     * <p>Name of a column of a binary type, such as BINARY, VARBINARY or BLOB.</p>
     */
    public static final Property binaryColumn = property("binaryColumn");

    /**
     * <p>Name of a column of type BIT.</p>
     */
    public static final Property bitColumn = property("bitColumn");

    /**
     * <p>Name of a column of type BOOLEAN.</p>
     */
    public static final Property booleanColumn = property("booleanColumn");

    /**
     * <p>Links d2rq:classMaps to RDFS or OWL classes.</p>
     */
    public static final Property clazz = property("class");

    /**
     * <p>A comment to be served as rdfs:comment for all associated class definitions</p>
     */
    public static final Property classDefinitionComment = property("classDefinitionComment");

    /**
     * <p>A label to be served as rdfs:label for all associated class definitions</p>
     */
    public static final Property classDefinitionLabel = property("classDefinitionLabel");

    /**
     * <p>Used to link RDFS or OWL classes to d2r:classMaps. Deprecated, use inverse
     * d2rq:class instead.</p>
     */
    public static final Property classMap = property("classMap");

    public static final Property column = property("column");

    /**
     * <p>SQL WHERE condition that must be satisfied for a database row to be mapped.</p>
     */
    public static final Property condition = property("condition");

    /**
     * <p>A constant RDF node to be used as the value of this property bridge, or as
     * the resource of a singleton class map.</p>
     */
    public static final Property constantValue = property("constantValue");

    /**
     * <p>Set to true if the table, after applying d2rq:joins and d2rq:conditions, may
     * contain duplicate records.</p>
     */
    public static final Property containsDuplicates = property("containsDuplicates");

    /**
     * <p>A database column containing data to be made downloadable.</p>
     */
    public static final Property contentDownloadColumn = property("contentDownloadColumn");

    public static final Property dataStorage = property("dataStorage");

    public static final Property databaseValue = property("databaseValue");

    /**
     * <p>The datatype of literals created by this bridge.</p>
     */
    public static final Property datatype = property("datatype");

    /**
     * <p>Name of a column of type DATE.</p>
     */
    public static final Property dateColumn = property("dateColumn");

    /**
     * <p>Links a d2rq:PropertyBridge to a dynamic property.</p>
     */
    public static final Property dynamicProperty = property("dynamicProperty");

    /**
     * <p>The number of rows that should be fetched from the database at once</p>
     */
    public static final Property fetchSize = property("fetchSize");

    /**
     * <p>Link to a translation table in an external CSV file.</p>
     */
    public static final Property href = property("href");

    /**
     * <p>Name of a column of type INTERVAL.</p>
     */
    public static final Property intervalColumn = property("intervalColumn");

    /**
     * <p>Qualified name of a Java class that implements de.fuberlin.wiwiss.d2rq.Translator
     * and translates between database and RDF.</p>
     */
    public static final Property javaClass = property("javaClass");

    /**
     * <p>JDBC data source name.</p>
     */
    public static final Property jdbcDSN = property("jdbcDSN");

    public static final Property jdbcDriver = property("jdbcDriver");

    /**
     * <p>SQL join condition over tables in the database.</p>
     */
    public static final Property join = property("join");

    /**
     * <p>The language tag of literals created by this bridge.</p>
     */
    public static final Property lang = property("lang");

    /**
     * <p>The number of results to retrieve from the database for this PropertyBridge</p>
     */
    public static final Property limit = property("limit");

    /**
     * <p>The number of results to retrieve from the database for the inverse statements
     * for this PropertyBridge</p>
     */
    public static final Property limitInverse = property("limitInverse");

    /**
     * <p>URL of a D2RQ mapping file.</p>
     */
    public static final Property mappingFile = property("mappingFile");

    /**
     * <p>The Internet media type, such as image/png, of the downloadable content, suitable
     * for use in the HTTP Content-Type header.</p>
     */
    public static final Property mediaType = property("mediaType");

    /**
     * <p>Name of a column of a numeric type, such as INT or DOUBLE or DECIMAL.</p>
     */
    public static final Property numericColumn = property("numericColumn");

    /**
     * <p>ODBC DSN</p>
     */
    public static final Property odbcDSN = property("odbcDSN");

    /**
     * <p>The column after which to sort results in ascending order for this PropertyBridge</p>
     */
    public static final Property orderAsc = property("orderAsc");

    /**
     * <p>The column after which to sort results in descending order for this PropertyBridge</p>
     */
    public static final Property orderDesc = property("orderDesc");

    public static final Property password = property("password");

    public static final Property pattern = property("pattern");

    /**
     * <p>Links a d2rq:PropertyBridge to an RDF property.</p>
     */
    public static final Property property = property("property");

    /**
     * <p>Used for linking RDFS properties to D2R property bridges. Deprecated, use
     * inverse d2rq:property instead.</p>
     */
    public static final Property propertyBridge = property("propertyBridge");

    /**
     * <p>A comment to be served as rdfs:comment for all associated properties</p>
     */
    public static final Property propertyDefinitionComment = property("propertyDefinitionComment");

    /**
     * <p>A label to be served as rdfs:label for all associated properties</p>
     */
    public static final Property propertyDefinitionLabel = property("propertyDefinitionLabel");

    public static final Property propertyName = property("propertyName");

    public static final Property propertyValue = property("propertyValue");

    public static final Property rdfValue = property("rdfValue");

    /**
     * <p>Has to be used if a join refers to a different classMap.</p>
     */
    public static final Property refersToClassMap = property("refersToClassMap");

    /**
     * <p>Base URI for resources generated by relative URI patterns.</p>
     */
    public static final Property resourceBaseURI = property("resourceBaseURI");

    /**
     * <p>Enforced upper limit for the size of SQL result sets.</p>
     */
    public static final Property resultSizeLimit = property("resultSizeLimit");

    /**
     * <p>Whether to serve inferred and user-supplied vocabulary data</p>
     */
    public static final Property serveVocabulary = property("serveVocabulary");

    /**
     * <p>A SQL expression whose result will be the value of this property bridge.</p>
     */
    public static final Property sqlExpression = property("sqlExpression");

    /**
     * <p>URL of a SQL script that will be run on startup.</p>
     */
    public static final Property startupSQLScript = property("startupSQLScript");

    /**
     * <p>Name of a column of a character type, such as CHAR, VARCHAR, NVARCHAR or CLOB.</p>
     */
    public static final Property textColumn = property("textColumn");

    /**
     * <p>Name of a column of type TIME.</p>
     */
    public static final Property timeColumn = property("timeColumn");

    /**
     * <p>Name of a column of type TIMESTAMP.</p>
     */
    public static final Property timestampColumn = property("timestampColumn");

    public static final Property translateWith = property("translateWith");

    public static final Property translation = property("translation");

    /**
     * <p>Database column which contains URIs.</p>
     */
    public static final Property uriColumn = property("uriColumn");

    /**
     * <p>URI pattern with placeholders that will be filled with values from a database
     * column.</p>
     */
    public static final Property uriPattern = property("uriPattern");

    /**
     * <p>An SQL expression whose result will be the URI value of this property bridge.</p>
     */
    public static final Property uriSqlExpression = property("uriSqlExpression");

    /**
     * <p>Whether to use bleeding edge optimizations</p>
     */
    public static final Property useAllOptimizations = property("useAllOptimizations");

    public static final Property username = property("username");

    /**
     * <p>Optimizing hint: a string contained in every value of this resource map.</p>
     */
    public static final Property valueContains = property("valueContains");

    /**
     * <p>Optimizing hint: the maximum length of values of this resource map.</p>
     */
    public static final Property valueMaxLength = property("valueMaxLength");

    /**
     * <p>Optimizing hint: a regular expression matching every value of this resource
     * map.</p>
     */
    public static final Property valueRegex = property("valueRegex");

    /**
     * this property is new (for ONT-api)
     * todo: add to schema ttl/rdf
     */
    public static final Property warning = property("warning");

    /**
     * <p>Represents an additional property that may be added to instances as well as
     * class and property definitions.</p>
     */
    public static final Resource AdditionalProperty = resource("AdditionalProperty");

    /**
     * <p>Maps an RDFS or OWL class to its database representation.</p>
     */
    public static final Resource ClassMap = resource("ClassMap");

    /**
     * <p>Represents general settings.</p>
     */
    public static final Resource Configuration = resource("Configuration");

    /**
     * <p>Jena Assemler specification for a relational database, mapped to RDF using
     * the D2RQ tool.</p>
     */
    public static final Resource D2RQModel = resource("D2RQModel");

    /**
     * <p>Represents a database.</p>
     */
    public static final Resource Database = resource("Database");

    /**
     * <p>(Deprecated) Maps a datatype property to one or more database columns.</p>
     */
    public static final Resource DatatypePropertyBridge = resource("DatatypePropertyBridge");

    /**
     * <p>Makes the contents of some database column downloadable.</p>
     */
    public static final Resource DownloadMap = resource("DownloadMap");

    /**
     * <p>(Deprecated) Maps an object property to one or more database columns.</p>
     */
    public static final Resource ObjectPropertyBridge = resource("ObjectPropertyBridge");

    /**
     * <p>Maps an RDF property to one or more database columns.</p>
     */
    public static final Resource PropertyBridge = resource("PropertyBridge");

    /**
     * <p>A database-to-RDF mapping from one or more database columns to a set of RDF
     * resources. An abstract class, usually not used directly.</p>
     */
    public static final Resource ResourceMap = resource("ResourceMap");

    /**
     * <p>Translation Key/Value Pair.</p>
     */
    public static final Resource Translation = resource("Translation");

    /**
     * <p>Lookup table for translations used in the mapping process.</p>
     */
    public static final Resource TranslationTable = resource("TranslationTable");


    protected static Resource resource(String local) {
        return model.createResource(NS + local);
    }

    protected static Property property(String local) {
        return model.createProperty(NS + local);
    }
}
